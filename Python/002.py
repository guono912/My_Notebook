# 002 对01中未涉及内容的补充，可能偏记忆
#所以在开始死记硬背前先搭新的架子2333333333
#2015 NOIP T1(TG)
import numpy as np
print('n=',end = ' ')
n = int(input())
a = np.zeros((n,n))
k = int(n/2)
a[0,k] = 1
j = 0
for i in range(2 , (n ** 2)+1):
    if (j == 0) and (k != (n-1)):
        a[n-1,k+1] = i
        j = n-1
        k = k+1
    elif (k == n-1) and (j != 0):
        a[j-1,0] = i
        j = j-1
        k = 0
    elif (j == 0) and (k == (n-1)):
        a[1,k] = i
        j = 1
    elif (a[j-1,k+1] == 0):
        a[j-1,k+1] = i
        j = j-1
        k = k+1
    else:
        a[j+1,k] = i
        j = j+1
print(a)

## 运算符补充
'''
"%"取余数，"//"取商,
两种运算符均可以变为赋值运算符的形式
如a %= b等价于a = a % b
'''
a = 9
b = 2
a % b
#>>>1
a // b
#>>>4
9.0 // 2.0
#>>>4.0
pow(2,3)
#>>>8

#没用的破事之1
#取消引用
a = 1
print(a)  # 1
del a
print(a)  #报错
'''
其实并没有什么用，因为一般这种都是放那，不用管的，想用直接重新定义就覆盖了
然而（目前）更没有用的是位运算，因为解释起来还【哔】烦人（涉及二进制之间的py交易）
所以我甚至不想放到没用系列里说以后非要用了再【有效摆脱问题宝宝，哔---】
'''
#没用的破事之2
'''
然后是复数，其实也并没有什么卵用（相对于一般的程序），但如果算一些物理上的事情嘛
也不排除用到的可能,a = 3 + 4i就有以下两种定义方式
'''
a = 3 + 4j   #要用j
a = complex(3,4)  #实部和虚部均为浮点型
#没有用的破事之3
#以16进制/8进制输入整数
a = 0xA
print(a)   #>>>10
b = 0o10
print(b)   #>>>8
#说了也没用的破事之五
'''
(因为已经不存在了所以是说了也没用)
python 2 中有一个函数叫cmp(a,b),干嘛的呢？
如果a>b返回1，a<b返回-1， a=b返回0
python 3 把它抛弃了，以(x>y)-(x<y)代替，不过
看着这一股信号转化方面的应用的味道，也没有用
'''
#